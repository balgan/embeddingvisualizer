{"ast":null,"code":"import { isAnyArray } from 'is-any-array';\nfunction max(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n  var _options$fromIndex = options.fromIndex,\n    fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n    _options$toIndex = options.toIndex,\n    toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n  var maxValue = input[fromIndex];\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n  return maxValue;\n}\nexport { max as default };","map":{"version":3,"names":["isAnyArray","max","input","options","arguments","length","undefined","TypeError","_options$fromIndex","fromIndex","_options$toIndex","toIndex","Number","isInteger","Error","maxValue","i","default"],"sources":["/Users/balgan/Code/embedding_visualizer/embedding-visualizer/node_modules/ml-array-max/lib-es6/index.js"],"sourcesContent":["import { isAnyArray } from 'is-any-array';\n\nfunction max(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isAnyArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var _options$fromIndex = options.fromIndex,\n      fromIndex = _options$fromIndex === void 0 ? 0 : _options$fromIndex,\n      _options$toIndex = options.toIndex,\n      toIndex = _options$toIndex === void 0 ? input.length : _options$toIndex;\n\n  if (fromIndex < 0 || fromIndex >= input.length || !Number.isInteger(fromIndex)) {\n    throw new Error('fromIndex must be a positive integer smaller than length');\n  }\n\n  if (toIndex <= fromIndex || toIndex > input.length || !Number.isInteger(toIndex)) {\n    throw new Error('toIndex must be an integer greater than fromIndex and at most equal to length');\n  }\n\n  var maxValue = input[fromIndex];\n\n  for (var i = fromIndex + 1; i < toIndex; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport { max as default };\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,cAAc;AAEzC,SAASC,GAAGA,CAACC,KAAK,EAAE;EAClB,IAAIC,OAAO,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EAEpF,IAAI,CAACJ,UAAU,CAACE,KAAK,CAAC,EAAE;IACtB,MAAM,IAAIK,SAAS,CAAC,wBAAwB,CAAC;EAC/C;EAEA,IAAIL,KAAK,CAACG,MAAM,KAAK,CAAC,EAAE;IACtB,MAAM,IAAIE,SAAS,CAAC,yBAAyB,CAAC;EAChD;EAEA,IAAIC,kBAAkB,GAAGL,OAAO,CAACM,SAAS;IACtCA,SAAS,GAAGD,kBAAkB,KAAK,KAAK,CAAC,GAAG,CAAC,GAAGA,kBAAkB;IAClEE,gBAAgB,GAAGP,OAAO,CAACQ,OAAO;IAClCA,OAAO,GAAGD,gBAAgB,KAAK,KAAK,CAAC,GAAGR,KAAK,CAACG,MAAM,GAAGK,gBAAgB;EAE3E,IAAID,SAAS,GAAG,CAAC,IAAIA,SAAS,IAAIP,KAAK,CAACG,MAAM,IAAI,CAACO,MAAM,CAACC,SAAS,CAACJ,SAAS,CAAC,EAAE;IAC9E,MAAM,IAAIK,KAAK,CAAC,0DAA0D,CAAC;EAC7E;EAEA,IAAIH,OAAO,IAAIF,SAAS,IAAIE,OAAO,GAAGT,KAAK,CAACG,MAAM,IAAI,CAACO,MAAM,CAACC,SAAS,CAACF,OAAO,CAAC,EAAE;IAChF,MAAM,IAAIG,KAAK,CAAC,+EAA+E,CAAC;EAClG;EAEA,IAAIC,QAAQ,GAAGb,KAAK,CAACO,SAAS,CAAC;EAE/B,KAAK,IAAIO,CAAC,GAAGP,SAAS,GAAG,CAAC,EAAEO,CAAC,GAAGL,OAAO,EAAEK,CAAC,EAAE,EAAE;IAC5C,IAAId,KAAK,CAACc,CAAC,CAAC,GAAGD,QAAQ,EAAEA,QAAQ,GAAGb,KAAK,CAACc,CAAC,CAAC;EAC9C;EAEA,OAAOD,QAAQ;AACjB;AAEA,SAASd,GAAG,IAAIgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}